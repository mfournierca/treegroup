test_Tre.        test_AddUnit     DEBUG		
test_Tre.        test_AddUnit     DEBUG		
test_Tre.        test_AddUnit     DEBUG		starting TreeGroup.Tree.test_Tree
    Tree.                 add     DEBUG		result: b'<a><b id="1"/>\n    <b id="2">\n        <c id="3">\n            <d id="4"/>\n        </c>\n        <c id="5"/>\n    </b>\n</a>'
    Tree.               equal     DEBUG		ordering1: [[1], [1, 1], [1, 2], [1, 2, 1], [1, 2, 1, 1], [1, 2, 2]]
    Tree.               equal     DEBUG		ordering2: [[1], [1, 1], [1, 2], [1, 2, 1], [1, 2, 1, 1], [1, 2, 2]]
    Tree.                 add     DEBUG		result: b'<a><b id="1"/>\n    <b id="2">\n        <c id="3">\n            <d id="4"/>\n        </c>\n        <c id="5"/>\n    </b>\n</a>'
    Tree.               equal     DEBUG		ordering1: [[1], [1, 1], [1, 2], [1, 2, 1], [1, 2, 1, 1], [1, 2, 2]]
    Tree.               equal     DEBUG		ordering2: [[1], [1, 1], [1, 2], [1, 2, 1], [1, 2, 1, 1], [1, 2, 2]]
test_Tre.        test_AddUnit     DEBUG		
test_Tre.        test_AddUnit     DEBUG		
    Tree.                 add     DEBUG		result: b'<a><b id="1"/>\n    <b id="2">\n        <c id="3">\n            <d id="4"/>\n        </c>\n        <c id="5"/>\n    </b>\n</a>'
    Tree.               equal     DEBUG		ordering1: [[1]]
    Tree.               equal     DEBUG		ordering2: [[1], [1, 1], [1, 2], [1, 2, 1], [1, 2, 1, 1], [1, 2, 2]]
test_Tre.test_ComplexTrees_Eq     DEBUG		
test_Tre.test_ComplexTrees_Eq     DEBUG		
test_Tre.test_ComplexTrees_Eq     DEBUG		starting TreeGroup.Tree.test_Tree
    Tree.                 add     DEBUG		result: b'<c><e id="2"/><e id="3"><g id="4"><i id="5"/></g><g id="6"/></e></c>'
    Tree.               equal     DEBUG		ordering1: [[1], [1, 1], [1, 2], [1, 2, 1], [1, 2, 1, 1], [1, 2, 2]]
    Tree.               equal     DEBUG		ordering2: [[1], [1, 1], [1, 2], [1, 2, 1], [1, 2, 1, 1], [1, 2, 2]]
    Tree.                 add     DEBUG		result: b'<c><e id="2"/><e id="3"><g id="4"><i id="5"/></g><g id="6"/></e></c>'
    Tree.               equal     DEBUG		ordering1: [[1], [1, 1], [1, 2], [1, 2, 1], [1, 2, 1, 1], [1, 2, 2]]
    Tree.               equal     DEBUG		ordering2: [[1], [1, 1], [1, 2], [1, 2, 1], [1, 2, 1, 1], [1, 2, 2]]
test_Tre.test_ComplexTrees_Eq     DEBUG		
test_Tre.test_ComplexTrees_Eq     DEBUG		
    Tree.                 add     DEBUG		result: b'<c><e id="2"/><e id="3"><g id="4"><i id="5"/></g><g id="6"/></e></c>'
    Tree.               equal     DEBUG		ordering1: [[1], [1, 1], [1, 2], [1, 2, 1], [1, 2, 1, 1], [1, 2, 2]]
    Tree.               equal     DEBUG		ordering2: [[1], [1, 1], [1, 2], [1, 2, 1], [1, 2, 1, 1], [1, 2, 2]]
test_Tre.test_ComplexTrees_Se     DEBUG		
test_Tre.test_ComplexTrees_Se     DEBUG		
test_Tre.test_ComplexTrees_Se     DEBUG		starting TreeGroup.Tree.test_Tree
    Tree.                 add     DEBUG		result: b'<c><b id="2"><c id="3"><d id="4"/>\n        </c><c id="5"/>\n    </b><b id="4"/>\n</c>'
    Tree.               equal     DEBUG		ordering1: [[1], [1, 1], [1, 1, 1], [1, 2]]
    Tree.               equal     DEBUG		ordering2: [[1], [1, 1], [1, 1, 1], [1, 1, 1, 1], [1, 1, 2], [1, 2]]
test_Tre.test_ComplexTrees_Tr     DEBUG		
test_Tre.test_ComplexTrees_Tr     DEBUG		
test_Tre.test_ComplexTrees_Tr     DEBUG		starting TreeGroup.Tree.test_Tree
    Tree.                 add     DEBUG		result: b'<c><_><c id="3"><d id="4"/>\n        </c><c id="5"/>\n    </_></c>'
    Tree.               equal     DEBUG		ordering1: [[1], [1, 1], [1, 1, 1], [1, 2], [1, 2, 1], [1, 2, 1, 1], [1, 2, 2]]
    Tree.               equal     DEBUG		ordering2: [[1], [1, 1], [1, 1, 1], [1, 1, 1, 1], [1, 1, 2]]
test_Tre.test_ComplexTrees_Un     DEBUG		
test_Tre.test_ComplexTrees_Un     DEBUG		
test_Tre.test_ComplexTrees_Un     DEBUG		starting TreeGroup.Tree.test_Tree
    Tree.                 add     DEBUG		result: b'<c><c id="a"/><e id="3"><g id="4"><d id="4"/>\n        </g><g id="6"/></e><e id="6">\n        <f id="7">\n            <g id="8"/>\n        </f>\n        <f id="8"/>\n    </e>\n</c>'
    Tree.               equal     DEBUG		ordering1: [[1], [1, 1], [1, 2], [1, 2, 1], [1, 2, 2]]
    Tree.               equal     DEBUG		ordering2: [[1], [1, 1], [1, 2], [1, 2, 1], [1, 2, 1, 1], [1, 2, 2], [1, 3], [1, 3, 1], [1, 3, 1, 1], [1, 3, 2]]
test_Tre.      test_JustRoots     DEBUG		
test_Tre.      test_JustRoots     DEBUG		
test_Tre.      test_JustRoots     DEBUG		starting TreeGroup.Tree.test_Tree
    Tree.                 add     DEBUG		result: b'<c/>'
    Tree.               equal     DEBUG		ordering1: [[1]]
    Tree.               equal     DEBUG		ordering2: [[1]]
    Tree.                 add     DEBUG		result: b'<c/>'
    Tree.               equal     DEBUG		ordering1: [[1]]
    Tree.               equal     DEBUG		ordering2: [[1]]
test_Tre.      test_JustRoots     DEBUG		
test_Tre.      test_JustRoots     DEBUG		
    Tree.                 add     DEBUG		result: b'<c/>'
    Tree.               equal     DEBUG		ordering1: [[1]]
    Tree.               equal     DEBUG		ordering2: [[1]]
test_Tre.   test_RootWithText     DEBUG		
test_Tre.   test_RootWithText     DEBUG		
test_Tre.   test_RootWithText     DEBUG		starting test_TreesWithText
    Tree.                 add     DEBUG		result: b'<dita lang="en"><head lang="en" profile="profile">\n        <title lang="en">Sample XHTML Basic document</title>\n    </head>\n    <body id="body" class="body" title="body" lang="en">\n        <title id="title" class="title" title="document title" lang="en">Sample XHTML Basic document</title>\n        <title id="ToC">Contents</title>\n    </body>\n</dita>'
    Tree.               equal     DEBUG		ordering1: [[1], [1, 1], [1, 1, 1], [1, 2], [1, 2, 1], [1, 2, 2]]
    Tree.               equal     DEBUG		ordering2: [[1], [1, 1], [1, 1, 1], [1, 2], [1, 2, 1], [1, 2, 2]]
test_Tre.   test_RootWithText     DEBUG		
test_Tre.   test_RootWithText     DEBUG		
    Tree.                 add     DEBUG		result: b'<dita lang="en"><head lang="en" profile="profile">\n        <title lang="en">Sample XHTML Basic document</title>\n    </head>\n    <body id="body" class="body" title="body" lang="en">\n        <title id="title" class="title" title="document title" lang="en">Sample XHTML Basic document</title>\n        <title id="ToC">Contents</title>\n    </body>\n</dita>'
    Tree.               equal     DEBUG		ordering1: [[1]]
    Tree.               equal     DEBUG		ordering2: [[1], [1, 1], [1, 1, 1], [1, 2], [1, 2, 1], [1, 2, 2]]
test_Tre.test_SimpleTrees_Equ     DEBUG		
test_Tre.test_SimpleTrees_Equ     DEBUG		
test_Tre.test_SimpleTrees_Equ     DEBUG		starting TreeGroup.Tree.test_Tree
    Tree.                 add     DEBUG		result: b'<e><g id="2"/></e>'
    Tree.               equal     DEBUG		ordering1: [[1], [1, 1]]
    Tree.               equal     DEBUG		ordering2: [[1], [1, 1]]
    Tree.                 add     DEBUG		result: b'<e><g id="2"/></e>'
    Tree.               equal     DEBUG		ordering1: [[1], [1, 1]]
    Tree.               equal     DEBUG		ordering2: [[1], [1, 1]]
test_Tre.test_SimpleTrees_Equ     DEBUG		
test_Tre.test_SimpleTrees_Equ     DEBUG		
    Tree.                 add     DEBUG		result: b'<e><g id="2"/></e>'
    Tree.               equal     DEBUG		ordering1: [[1], [1, 1]]
    Tree.               equal     DEBUG		ordering2: [[1], [1, 1]]
test_Tre.test_SimpleTrees_Une     DEBUG		
test_Tre.test_SimpleTrees_Une     DEBUG		
test_Tre.test_SimpleTrees_Une     DEBUG		starting TreeGroup.Tree.test_Tree
    Tree.                 add     DEBUG		result: b'<b><d id="2"/><g id="1"/>\n</b>'
    Tree.               equal     DEBUG		ordering1: [[1], [1, 1]]
    Tree.               equal     DEBUG		ordering2: [[1], [1, 1], [1, 2]]
test_Tre.       test_Subtrees     DEBUG		
test_Tre.       test_Subtrees     DEBUG		
test_Tre.       test_Subtrees     DEBUG		starting test_Subtrees
test_Tre.  test_TreeToSubtree     DEBUG		
test_Tre.  test_TreeToSubtree     DEBUG		
test_Tre.  test_TreeToSubtree     DEBUG		starting test_TreeToSubtree
    Tree.                 add     DEBUG		result: b'<_ id="a"><b id="9"><g id="X"/></b><h id="1"><f id="7">\n            <g id="8"/>\n        </f>\n        <f id="8"/>\n    </h></_>'
    Tree.               equal     DEBUG		ordering1: [[1], [1, 1], [1, 1, 1], [1, 2], [2], [2, 1], [2, 1, 1], [2, 2]]
    Tree.               equal     DEBUG		ordering2: [[1], [1, 1], [1, 1, 1], [1, 2], [1, 2, 1], [1, 2, 1, 1], [1, 2, 2]]
test_Tre.  test_TreesWithText     DEBUG		
test_Tre.  test_TreesWithText     DEBUG		
test_Tre.  test_TreesWithText     DEBUG		starting test_TreesWithText
    Tree.                 add     DEBUG		result: b'<c><Z id="9"><c id="3">nSYKDI)KqiD<d/></c><c/>\n    </Z><a id="6"><a id="7">nSYKDI)KqiF<b id="8"/>nSYKDI)KqiH</a><a id="8">File14Text4</a></a></c>'
    Tree.               equal     DEBUG		ordering1: [[1], [1, 1], [1, 1, 1], [1, 2], [1, 2, 1], [1, 2, 1, 1], [1, 2, 2]]
    Tree.               equal     DEBUG		ordering2: [[1], [1, 1], [1, 1, 1], [1, 1, 1, 1], [1, 1, 2], [1, 2], [1, 2, 1], [1, 2, 1, 1], [1, 2, 2]]
    Tree.               equal     DEBUG		ordering1: [[1], [1, 1], [1, 2], [1, 3], [1, 3, 1], [1, 3, 1, 1]]
    Tree.               equal     DEBUG		ordering2: [[1], [1, 1], [1, 2], [1, 3], [1, 3, 1], [1, 3, 1, 1]]
    Tree.               equal     DEBUG		ordering1: [[1], [1, 1], [1, 2], [1, 3], [1, 3, 1], [1, 3, 1, 1]]
    Tree.               equal     DEBUG		ordering2: [[1], [1, 1], [1, 2], [1, 3], [1, 3, 1], [1, 3, 1, 1]]
    Tree.               equal     DEBUG		ordering1: [[1], [1, 1], [1, 1, 1], [1, 2], [1, 2, 1], [1, 2, 2], [1, 2, 3], [1, 2, 3, 1], [1, 2, 3, 1, 1]]
    Tree.               equal     DEBUG		ordering2: [[1], [1, 1], [1, 1, 1], [1, 2], [1, 2, 1], [1, 2, 2], [1, 2, 3], [1, 2, 3, 1], [1, 2, 3, 1, 1]]
    Tree.               equal     DEBUG		ordering1: [[1], [1, 1], [1, 1, 1], [1, 2], [1, 2, 1], [1, 2, 2], [1, 2, 3], [1, 2, 3, 1], [1, 2, 3, 1, 1]]
    Tree.               equal     DEBUG		ordering2: [[1], [1, 1], [1, 1, 1], [1, 2], [1, 2, 1], [1, 2, 2], [1, 2, 3], [1, 2, 3, 1], [1, 2, 3, 1, 1]]
    Tree.               equal     DEBUG		ordering1: [[1], [1, 1], [1, 1, 1], [1, 2], [1, 2, 1], [1, 2, 2], [1, 2, 3], [1, 2, 3, 1], [1, 2, 3, 1, 1]]
    Tree.               equal     DEBUG		ordering2: [[1]]
    Tree.               equal     DEBUG		ordering1: [[1], [1, 1], [1, 1, 1], [1, 2], [1, 2, 1], [1, 2, 2], [1, 2, 3], [1, 2, 3, 1], [1, 2, 3, 1, 1]]
    Tree.               equal     DEBUG		ordering2: [[1]]
    Tree.               equal     DEBUG		ordering1: [[1], [1, 1], [1, 1, 1], [1, 2], [1, 2, 1], [1, 2, 2], [1, 2, 3], [1, 2, 3, 1], [1, 2, 3, 1, 1]]
    Tree.               equal     DEBUG		ordering2: [[1], [1, 1], [1, 2]]
    Tree.               equal     DEBUG		ordering1: [[1], [1, 1], [1, 1, 1], [1, 2], [1, 2, 1], [1, 2, 2], [1, 2, 3], [1, 2, 3, 1], [1, 2, 3, 1, 1]]
    Tree.               equal     DEBUG		ordering2: [[1], [1, 1], [1, 2]]
    Tree.               equal     DEBUG		ordering1: [[1], [1, 1], [1, 1, 1], [1, 2], [1, 2, 1], [1, 2, 2], [1, 2, 3], [1, 2, 3, 1], [1, 2, 3, 1, 1]]
    Tree.               equal     DEBUG		ordering2: [[1], [1, 1], [1, 1, 1], [1, 2], [1, 2, 1], [1, 2, 2], [1, 2, 3], [1, 2, 3, 1], [1, 2, 3, 1, 1]]
    Tree.               equal     DEBUG		ordering1: [[1], [1, 1], [1, 1, 1], [1, 2], [1, 2, 1], [1, 2, 2], [1, 2, 3], [1, 2, 3, 1], [1, 2, 3, 1, 1]]
    Tree.               equal     DEBUG		ordering2: [[1], [1, 1], [1, 1, 1], [1, 2], [1, 2, 1], [1, 2, 2], [1, 2, 3], [1, 2, 3, 1], [1, 2, 3, 1, 1]]
    Tree.               equal     DEBUG		ordering1: [[1], [1, 1], [1, 1, 1], [1, 2], [1, 2, 1], [1, 2, 2], [1, 2, 3], [1, 2, 3, 1], [1, 2, 3, 1, 1]]
    Tree.               equal     DEBUG		ordering2: [[1], [1, 1], [1, 1, 1], [1, 2], [1, 2, 1], [1, 2, 2], [1, 2, 3], [1, 2, 3, 1], [1, 2, 3, 1, 1]]
    Tree.               equal     DEBUG		ordering1: [[1], [1, 1], [1, 1, 1], [1, 2], [1, 2, 1], [1, 2, 2], [1, 2, 3], [1, 2, 3, 1], [1, 2, 3, 1, 1]]
    Tree.               equal     DEBUG		ordering2: [[1], [1, 1], [1, 1, 1], [1, 2], [1, 2, 1], [1, 2, 2], [1, 2, 3], [1, 2, 3, 1], [1, 2, 3, 1, 1]]
    Tree.               equal     DEBUG		ordering1: [[1], [1, 1], [1, 1, 1], [1, 2], [1, 2, 1], [1, 2, 2], [1, 2, 3], [1, 2, 3, 1], [1, 2, 3, 1, 1]]
    Tree.               equal     DEBUG		ordering2: [[1], [1, 1], [1, 1, 1], [1, 2], [1, 2, 1], [1, 2, 2], [1, 2, 3], [1, 2, 3, 1], [1, 2, 3, 1, 1]]
    Tree.               equal     DEBUG		ordering1: [[1], [1, 1], [1, 1, 1], [1, 2], [1, 2, 1], [1, 2, 2], [1, 2, 3], [1, 2, 3, 1], [1, 2, 3, 1, 1]]
    Tree.               equal     DEBUG		ordering2: [[1], [1, 1], [1, 1, 1], [1, 2], [1, 2, 1], [1, 2, 2], [1, 2, 3], [1, 2, 3, 1], [1, 2, 3, 1, 1]]
    Tree.               equal     DEBUG		ordering1: [[1], [1, 1], [2], [2, 1], [2, 2], [2, 3], [2, 3, 1], [2, 3, 1, 1]]
    Tree.               equal     DEBUG		ordering2: [[1], [1, 1], [1, 2], [1, 3], [1, 3, 1], [1, 3, 1, 1]]
    Tree.               equal     DEBUG		ordering1: [[1], [1, 1], [2], [2, 1], [2, 2], [2, 3], [2, 3, 1], [2, 3, 1, 1]]
    Tree.               equal     DEBUG		ordering2: [[1], [1, 1], [1, 2], [1, 3], [1, 3, 1], [1, 3, 1, 1]]
test_Tre.    test_ComplexTree     DEBUG		
test_Tre.    test_ComplexTree     DEBUG		
test_Tre.    test_ComplexTree     DEBUG		starting TreeGroup.Tree.test_Tree
    Tree.               equal     DEBUG		ordering1: [[1], [1, 1], [1, 2], [1, 3], [1, 3, 1], [1, 3, 1, 1], [1, 3, 2]]
    Tree.               equal     DEBUG		ordering2: [[1], [1, 1], [1, 2], [1, 3], [1, 3, 1], [1, 3, 1, 1], [1, 3, 2]]
test_Tre.test_InverseAddition     DEBUG		
test_Tre.test_InverseAddition     DEBUG		
test_Tre.test_InverseAddition     DEBUG		starting TreeGroup.Tree.test_Tree
    Tree.                 add     DEBUG		result: b'<_></_>'
    Tree.               equal     DEBUG		ordering1: [[1], [1, 1], [1, 2], [1, 3], [1, 3, 1], [1, 3, 1, 1], [1, 3, 2]]
    Tree.               equal     DEBUG		ordering2: [[1]]
test_Tre.     test_SimpleTree     DEBUG		
test_Tre.     test_SimpleTree     DEBUG		
test_Tre.     test_SimpleTree     DEBUG		starting TreeGroup.Tree.test_Tree
    Tree.               equal     DEBUG		ordering1: [[1], [1, 1]]
    Tree.               equal     DEBUG		ordering2: [[1], [1, 1]]
test_Tre.        test_Subtree     DEBUG		
test_Tre.        test_Subtree     DEBUG		
test_Tre.        test_Subtree     DEBUG		starting TreeGroup.Tree.test_Tree
    Tree.               equal     DEBUG		ordering1: [[1], [1, 1], [1, 1, 1], [1, 2]]
    Tree.               equal     DEBUG		ordering2: [[1], [1, 1], [1, 1, 1], [1, 2]]
test_Tre.       test_UnitTree     DEBUG		
test_Tre.       test_UnitTree     DEBUG		
test_Tre.       test_UnitTree     DEBUG		starting TreeGroup.Tree.test_Tree
    Tree.               equal     DEBUG		ordering1: [[1]]
    Tree.               equal     DEBUG		ordering2: [[1]]
    Tree.                 add     DEBUG		result: b'<Z/>'
    Tree.                 add     DEBUG		result: b'<J><_/><Z><Z></Z></Z><ULITLLWNVZHFIV/></J>'
    Tree.                 add     DEBUG		result: b'<_/>'
